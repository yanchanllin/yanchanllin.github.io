---
layout: post
title:      "My React and Redux Project"
date:       2019-07-17 12:44:36 -0400
permalink:  my_react_and_redux_project
---

   This is my first time learning React, it is a JavaScript library for building user interfaces. Thus for this project I made an app call "Book Fellow ", on the app you can recommending books on your page; including updating them, read it, delete them, or create books you wish to share. Mean while others can review the book and rating it to help people who want to pick this book to read or not. This project did help me learn React and Redux as a new language faster from fixing errors and facing new problems. In Book Fellow, the app has an API backend and a client side frontend:
	  
 Backend of this book app data is written in Ruby on Rails, a user can log in to view all the book suggestions, create new book ideas, updating, and delete books. It has three controllers, and models like user, book, and review. Book has many reviews and has one :user. Also user has many books and reviews. A review belongs to user and book. In books controller is mainly where I focus on to make all the CRUD methods for book happen, then at my frontend I can use Redux Thunk middleware allows the request to interact with the API asynchronously, so after the response comes back from the API, a dispatch can be sent to the Redux store to update the data there. After I created Rails backend with routes, seeds, migrations, serializers, models and controllers, move on to client side src. Client side React and Redux is where my project requirements primary need, start with index.js to import React from "react"; almost all the files need to import React. The ReactDOM,serviceWorker, Provider, store etc. for index to load the app. Moreover move on to components to begin with login, my books and book card to show one book at a page, and my books component will list all the books for current user by mapping through each book. Each book will show on a link, click on it will led to return book card to show the details of that book. We use mapStateToProps allow us getting information from our store, for that case I got myBooks from the store to connect to get changes when state occur through mapStateToProps. 
	 
 BookCard component will return a book detail to view, to edit the descriptions or to delete that one book. I added a link from /books/${book.id}/edit to click on for editing, and a button onClick={() => this.props.deleteBook(book.id)}  for deleting. But for links I need to import  from react-router-dom,react-router-dom contains the DOM bindings for React Router. In other words, the router components for an app development environment using React Native. Other components like BookForm will handle  a form creating new book, when edit updateBookForm; and EditBookFormWrapper includes all the edit functionalities connect history and handleSubmit to setFormDataForEdit, updateBook, resetNewBookForm from action file. componentDidMount() setFormDataForEdit, componentDidUpdate start to update, and componentWillUnmount() to resetNewBookForm() making the form empty for the form to use.   Similar to NewBookFormWrapper component using history and createBook props to handlesubmit a new book, and create book is a fetch request from async action http://localhost:3000/api/v1/books  by implement middleware can post it, dispatch it and history.push(`/books/${resp.data.id}`). Finally the reducer is a pure function that takes the current state and an action, and returns the next state. we will see all the reducer case in the store and return that current state action like ADD_BOOK, UPDATE_BOOK and CLEAR_BOOKS etc.
  
 React and Redux offer a lot different  functionality skills for creating app, it was fun to understand and eye opening to make it in my mind. The hard part is to connect all those dots together and build efficient user interfaces; Redux makes state management in your application clean and predictable. Thus need to take step by step  and use asynchronous features to your application carefully. I'm ready to learn more and practice more in the future. 



